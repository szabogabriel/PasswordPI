package pi.password.keyboard.us;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import pi.password.keyboard.KeyboardService;

public class KeyboardUs implements KeyboardService {

	private static final File KEYBOARD_OUTPUT_FILE = new File("/dev/hidg0");
	
	private static final byte[] KEY_RELEASE = new byte[] {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	
	private static final Map<String, byte[]> KEYS = new HashMap<>();
	
	static {
		KEYS.put("a", new byte[] { 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("A", new byte[] { 0x02, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("b", new byte[] { 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("B", new byte[] { 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("c", new byte[] { 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("C", new byte[] { 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("d", new byte[] { 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("D", new byte[] { 0x02, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("e", new byte[] { 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("E", new byte[] { 0x02, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("f", new byte[] { 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("F", new byte[] { 0x02, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("g", new byte[] { 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("G", new byte[] { 0x02, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("h", new byte[] { 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("H", new byte[] { 0x02, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("i", new byte[] { 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("I", new byte[] { 0x02, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("j", new byte[] { 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("J", new byte[] { 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("k", new byte[] { 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("K", new byte[] { 0x02, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("l", new byte[] { 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("L", new byte[] { 0x02, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("m", new byte[] { 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("M", new byte[] { 0x02, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("n", new byte[] { 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("N", new byte[] { 0x02, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("o", new byte[] { 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("O", new byte[] { 0x02, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("p", new byte[] { 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("P", new byte[] { 0x02, 0x00, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("q", new byte[] { 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("Q", new byte[] { 0x02, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("r", new byte[] { 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("R", new byte[] { 0x02, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("s", new byte[] { 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("S", new byte[] { 0x02, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("t", new byte[] { 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("T", new byte[] { 0x02, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("u", new byte[] { 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("U", new byte[] { 0x02, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("v", new byte[] { 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("V", new byte[] { 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("w", new byte[] { 0x00, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("W", new byte[] { 0x02, 0x00, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("x", new byte[] { 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("X", new byte[] { 0x02, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("y", new byte[] { 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("Y", new byte[] { 0x02, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("z", new byte[] { 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("Z", new byte[] { 0x02, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("1", new byte[] { 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("2", new byte[] { 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("3", new byte[] { 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("4", new byte[] { 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("5", new byte[] { 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("6", new byte[] { 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("7", new byte[] { 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("8", new byte[] { 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("9", new byte[] { 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("0", new byte[] { 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("!", new byte[] { 0x02, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("@", new byte[] { 0x02, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("#", new byte[] { 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("$", new byte[] { 0x02, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("%", new byte[] { 0x02, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("^", new byte[] { 0x02, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("&", new byte[] { 0x02, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("*", new byte[] { 0x02, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("(", new byte[] { 0x02, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put(")", new byte[] { 0x02, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put(System.lineSeparator(), new byte[] { 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("\t", new byte[] { 0x00, 0x00, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put(" ", new byte[] { 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("-", new byte[] { 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("_", new byte[] { 0x02, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("=", new byte[] { 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("+", new byte[] { 0x02, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("[", new byte[] { 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("{", new byte[] { 0x02, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("]", new byte[] { 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("}", new byte[] { 0x02, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("\\", new byte[] { 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("|", new byte[] { 0x02, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("#", new byte[] { 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("~", new byte[] { 0x02, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put(";", new byte[] { 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put(":", new byte[] { 0x02, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("'", new byte[] { 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("\"", new byte[] { 0x02, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("`", new byte[] { 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("~", new byte[] { 0x02, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put(",", new byte[] { 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("<", new byte[] { 0x02, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put(".", new byte[] { 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put(">", new byte[] { 0x02, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("/", new byte[] { 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00 });
		KEYS.put("?", new byte[] { 0x02, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00 });
	}
	
	public boolean sendText(String text) {
		try (OutputStream os = new FileOutputStream(KEYBOARD_OUTPUT_FILE)){
			int len = text.length();
			for (int i = 0; i < len; i++) {
				String key = text.substring(i, i + 1);
				if (KEYS.containsKey(key)) {
					os.write(KEYS.get(key));
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					os.write(KEY_RELEASE);
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return true;
	}

}
